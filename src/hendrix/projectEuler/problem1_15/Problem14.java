package hendrix.projectEuler.problem1_15;

/**
 * Description:
 * Problem14, Longest Collatz sequence
 * <p>
 * The following iterative sequence is defined for the set of positive integers:
 * <p>
 * n → n/2 (n is even)
 * n → 3n + 1 (n is odd)
 * <p>
 * Using the rule above and starting with 13, we generate the following sequence:
 * <p>
 * 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
 * It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
 * <p>
 * Which starting number, under one million, produces the longest chain?
 * <p>
 * NOTE: Once the chain starts the terms are allowed to go above one million.
 */
public class Problem14 {
    /*
    Brute force, nothing special
    */
    private static String solve() {
        int max = 0;
        int answer = 0;
        for (int i = 1; i < 1000000; i++) {
            int temp = collatz(i);
            if (temp > max) {
                max = temp;
                answer = i;
            }
        }
        return Integer.toString(answer);
    }

    /**
     * return the length of the collatz sequence generated by the given number
     *
     * @param num number to be calculated
     * @return length in int
     */
    private static int collatz(long num) {
        int count = 1;
        while (num > 1) {
            count++;
            if (num % 2 == 0) {
                num /= 2;
            } else {
                num = num * 3 + 1;
            }
        }
        return count;
    }

    public static void main(String[] args) {
        long startTime = System.nanoTime();
        String result = solve();
        long endTime = System.nanoTime();
        System.out.println("Answer: " + result + "\nProcess took " + (endTime - startTime) / (1000 * 1000) + "ms to execute");
    }
}
/*
Put result here
*/