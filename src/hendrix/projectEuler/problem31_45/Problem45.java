package hendrix.projectEuler.problem31_45;

import java.util.HashSet;
import java.util.LinkedList;

/**
 * Description:
 * Problem45, Triangular, pentagonal, and hexagonal
 *
 * Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
 *
 * Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
 * Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
 * Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
 * It can be verified that T285 = P165 = H143 = 40755.
 *
 * Find the next triangle number that is also pentagonal and hexagonal.
 */
public class Problem45 {
    /*
    Enumeration, nothing special
    */
    private static String solve() {
        int upperBound = 100000;
        //Store triangle num in a list
        LinkedList<Long> triNums = new LinkedList<>();
        for (int i = 1; i <= upperBound; i+=2) {
            triNums.add(triangle(i));
        }
        //Using hashSet to determine pentagon number and hexagon number
        HashSet<Long> pentaNums = new HashSet<>();
        int index = 1;
        long temp = pentagon(index);
        while(temp < triNums.getLast()){
            temp = pentagon(index++);
            pentaNums.add(temp);
        }
        HashSet<Long> hexaNums = new HashSet<>();
        index = 1;
        temp = hexagon(index);
        while(temp < triNums.getLast()){
            temp = pentagon(index++);
            hexaNums.add(temp);
        }
        long answer = 0;
        for (int i = 0; i < triNums.size(); i++) {
            if(pentaNums.contains(triNums.get(i)) && hexaNums.contains(triNums.get(i))){
                answer = triNums.get(i);
            }
        }

        return Long.toString(answer);
    }

    private static long triangle(long n){
        return ((n + 1) * n)/2;
    }
    private static long pentagon(long n){
        return (((3 * n) -1) * n) / 2;
    }
    private static long hexagon(long n){
        return ((2 * n) - 1) * n;
    }

    public static void main(String[] args) {
        long startTime = System.nanoTime();
        String result = solve();
        long endTime = System.nanoTime();
        System.out.println("Answer: " + result + "\nProcess took " + (endTime - startTime) / (1000 * 1000) + "ms to execute");
    }
}
/*
Answer: 1533776805
Process took 1235ms to execute
*/